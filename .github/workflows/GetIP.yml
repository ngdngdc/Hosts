# This is a basic workflow to help you get started with Actions

name: Get IP

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:
  #schedule:
  #  - cron: "0 0 * * *"

permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  generate-hosts:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      # Runs a single command using the runners shell
      - name: Set up environment
        run: |
          sudo apt-get update && sudo apt-get install -y dnsutils

      # Runs a set of commands using the runners shell
      - name: Define domain groups
        id: define_domains
        env:
          DOMAIN_GROUPS: |
            # GROUP: Group1_DLsite
            login.dlsite.com
            ssl.dlsite.com
            www.dlsite.com
            www.nijiyome.com
            www.nijiyome.jp
            download.dlsite.com
            ci-en.dlsite.com
            play.dlsite.com
            dlsite.com
            dlsite.jp
            img.dlsite.jp
            media.dlsite.com
            ch.dlsite.com
            chobit.cc
            nijiyome.com
            nijiyome.jp
            trial.dlsite.com
            # GROUP: Group2_Itch.io
            i.ytimg.com
            img.itch.zone
            itch.io
            static.itch.io
            # GROUP: Group3_Deviantart
            deviantart.com
            www.deviantart.com
            email.mg.deviantart.com
            st.deviantart.net
            a.deviantart.net
            e.deviantart.net
            i.deviantart.net
            t00.deviantart.net
            static.parastorage.com
            api-da.wixmp.com
            deviantart.net
            parastorage.com
            # GROUP: Group4_Discord
            cdn.discordapp.com
            discordapp.com
            discord.com
            discord.gg
            discord.app
            updates.discord.com
            media.discordapp.net
            latency.discord.media
            remote-auth-gateway.discord.gg
            # GROUP: Group5_recaptcha
            ajax.googleapis.com
            gapis.geekzu.org
            www.recaptcha.google.com
            recaptcha.net
            gstatic.com
            gstatic.cn
            google.com
            # GROUP: Group6_BitCash
            bitcash.jp
            bs.nakanohito.jp
            nakanohito.jp
            cs.nakanohito.jp
        run: |
          echo "groups<<EOF" >> $GITHUB_OUTPUT
          echo "$DOMAIN_GROUPS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate annotated hosts file with detailed IPv6 diagnostics
        run: |
          cat > hosts << EOF
          # Auto-generated hosts file
          # Generated by GitHub Actions on $(date)
          # IPv6 addresses are prioritized, IPv4 as fallback
          EOF

          groups="${{ steps.define_domains.outputs.groups }}"
          current_group=""

          while IFS= read -r line; do
            if [[ "$line" =~ ^#\ GROUP:\ (.+) ]]; then
              group_name="${BASH_REMATCH[1]}"
              echo "# $group_name" >> hosts
              current_group="$group_name"
            elif [[ -n "$line" && "$line" != \#* ]]; then
              echo "=== Resolving $line ===" >&2
              
              # 详细的 DNS 查询诊断
              echo "1. Testing basic connectivity..." >&2
              ping6 -c 1 "$line" 2>/dev/null && echo "  ✓ Ping6 successful" >&2 || echo "  ✗ Ping6 failed" >&2
              
              echo "2. Querying AAAA records..." >&2
              dig AAAA +short +time=5 +tries=3 "$line" | while read result; do
                if [[ -n "$result" ]]; then
                  echo "  ✓ AAAA record: $result" >&2
                fi
              done
              
              echo "3. Querying A records..." >&2
              dig A +short +time=5 +tries=3 "$line" | while read result; do
                if [[ -n "$result" ]]; then
                  echo "  ✓ A record: $result" >&2
                fi
              done
              
              # 尝试多个 DNS 服务器
              dns_servers=("8.8.8.8" "1.1.1.1" "2001:4860:4860::8888" "2606:4700:4700::1111")
              
              echo "4. Trying different DNS servers..." >&2
              for dns in "${dns_servers[@]}"; do
                ipv6_test=$(dig AAAA +short @"$dns" +time=3 "$line" 2>/dev/null | head -n 1)
                if [[ -n "$ipv6_test" ]]; then
                  echo "  ✓ $dns returned IPv6: $ipv6_test" >&2
                fi
              done
              
              # 改进的 IPv6 获取逻辑
              echo "5. Final resolution..." >&2
              
              # 方法1: 标准 AAAA 查询
              ipv6=$(dig AAAA +short +time=5 +tries=3 "$line" | grep -E '^[0-9a-fA-F:]+$' | head -n 1)
              
              # 方法2: 如果标准方法失败，尝试使用特定 DNS 服务器
              if [[ -z "$ipv6" ]]; then
                ipv6=$(dig AAAA +short @2001:4860:4860::8888 +time=5 "$line" | grep -E '^[0-9a-fA-F:]+$' | head -n 1)
              fi
              
              # 方法3: 尝试获取所有记录并过滤
              if [[ -z "$ipv6" ]]; then
                ipv6=$(dig ANY +short +time=5 "$line" | grep -E '^[0-9a-fA-F:]+$' | head -n 1)
              fi
              
              # 获取 IPv4
              ipv4=$(dig A +short +time=5 +tries=3 "$line" | grep -E '^[0-9.]+$' | head -n 1)
              
              echo "6. Results:" >&2
              echo "  IPv6: $ipv6" >&2
              echo "  IPv4: $ipv4" >&2
              
              # 写入结果
              if [[ -n "$ipv6" ]]; then
                echo "$ipv6 $line" >> hosts
                echo "  ✅ Using IPv6" >&2
              elif [[ -n "$ipv4" ]]; then
                echo "$ipv4 $line" >> hosts
                echo "  ✅ Using IPv4 (fallback)" >&2
              else
                echo "  ❌ Failed to resolve $line" >&2
              fi
              
              echo "" >&2
            fi
          done <<< "$groups"

          echo "=== Generated hosts file ===" >&2
          cat hosts

      - name: Commit hosts file to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet --exit-code hosts; then
            echo "No changes to hosts file"
            exit 0
          fi

          git add hosts
          git commit -m "Update hosts file - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
